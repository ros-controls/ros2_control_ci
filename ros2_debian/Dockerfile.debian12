ARG from=debian:12-slim
FROM ${from}

ARG CMAKE_INSTALL_PREFIX=/usr/local
ARG NUM_THREADS=8

# Avoid warnings by switching to noninteractive
ENV DEBIAN_FRONTEND=noninteractive

# Update all packages
RUN apt-get update && apt-get -y upgrade \
  && \
  : "remove cache" && \
  rm -rf /var/lib/apt/lists/*

# install system dependencies
RUN apt-get update -y -qq && \
  : "system dependencies" && \
  apt-get install -y -qq --no-install-recommends \
  \
  acl \
  aptitude \
  autoconf \
  automake \
  build-essential \
  cmake \
  curl \
  dnsutils \
  git \
  gnupg2 \
  intltool \
  libacl1-dev \
  libasio-dev \
  libblosc1 \
  libbondcpp-dev \
  libcap-dev \
  libcgal-dev \
  libeigen3-dev \
  libfmt-dev \
  liblttng-ust-dev lttng-tools python3-lttng \
  libssl-dev \
  libtinyxml-dev \
  libtinyxml2-dev \
  lsb-release \
  lttng-tools \
  mlocate \
  nlohmann-json3-dev \
  pkg-config \
  python3-dev \
  python3-jinja2 \
  python3-lxml \
  python3-lark \
  python3-numpy \
  python3-pip \
  python3-psutil \
  python3-pygraphviz \
  python3-typeguard \
  software-properties-common \
  tar \
  unzip \
  wget \
  && \
  : "remove cache" && \
  rm -rf /var/lib/apt/lists/*


# Setup keys
RUN set -eux; \
    export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}') \
    && curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb" \
    && apt install /tmp/ros2-apt-source.deb

# setup environment
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ARG ROS_DISTRO
# Environment variables defined using the ENV instruction always override an ARG instruction of the same name.
ENV ROS_DISTRO=${ROS_DISTRO:-iron}

# ros-base include begin
# https://github.com/osrf/docker_images/blob/master/ros/galactic/ubuntu/focal/ros-core/Dockerfile
# https://github.com/osrf/docker_images/blob/master/ros/iron/ubuntu/jammy/ros-base/Dockerfile

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
  python3-colcon-common-extensions \
  python3-colcon-mixin \
  python3-rosdep \
  python3-vcstool \
  python3-ament-pep257 \
  python3-flake8 \
  python3-coverage \
  && \
  # colcon-devtools>0.2.3 is not released for debian12, so override it with pip
  # typing_extensions needs to be >4.7.0, but is available on apt with 4.4.0 only
  apt-get remove -y python3-colcon-devtools && \
  pip3 install --no-cache-dir colcon-devtools typing_extensions --break-system-package && \
  : "remove cache" && \
  rm -rf /var/lib/apt/lists/*

# bootstrap rosdep
RUN rosdep init && \
  rosdep update --rosdistro $ROS_DISTRO

# setup colcon mixin and metadata
RUN colcon mixin add default \
  https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
  colcon mixin update && \
  colcon metadata add default \
  https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
  colcon metadata update

# install dependencies via apt
ENV DEBCONF_NOWARNINGS=yes

# install and activate ccache, lld, cppcheck
RUN \
  : "install ccache" \
  && apt-get update -y -qq \
  && apt-get -y install --no-install-recommends ccache lld cppcheck \
  && /usr/sbin/update-ccache-symlinks \
  && \
  : "remove cache" && \
  rm -rf /var/lib/apt/lists/*

# rust, needed for zenoh
RUN \
  curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y && \
  . "$HOME/.cargo/env" && \
  rustc --version

# ---- ROS ----
# clone source, ROS core
ENV ROS2_WS=/opt/ros2_ws
RUN mkdir -p $ROS2_WS/src
WORKDIR $ROS2_WS
COPY ros-controls.$ROS_DISTRO.repos .
RUN vcs import --input https://raw.githubusercontent.com/ros2/ros2/$ROS_DISTRO/ros2.repos src &&\
  vcs import src < ros-controls.$ROS_DISTRO.repos
# build source, ROS core
RUN \
  : "build ROS core from source" && \
  . "$HOME/.cargo/env" && \
  colcon  build \
  --mixin release build-testing-off \
  --cmake-args --no-warn-unused-cli -DCMAKE_CXX_FLAGS="-Wno-maybe-uninitialized"  \
  --packages-up-to robot_state_publisher tf2_ros tf2_eigen tf2_kdl tf2_eigen_kdl yaml_cpp_vendor filters \
  ros2param ros2interface ros2topic ros2action ros2lifecycle ros2launch ros2run \
  xacro diagnostic_updater generate_parameter_library angles example_interfaces \
  backward_ros pal_statistics \
  ackermann_msgs trajectory_msgs tf2_msgs tf2_geometry_msgs sensor_msgs geometry_msgs nav_msgs \
  sdformat_urdf && \
  rm -rf log src build

# add default.yaml to the image
COPY defaults.yaml /root/.colcon/defaults.yaml

# there is no python3-graphviz on debian12, so install it via pip
RUN pip3 install --no-cache-dir graphviz --break-system-packages

# set up sourcing of ros
COPY ./ros_entrypoint.sh /
ENTRYPOINT [ "/ros_entrypoint.sh" ]
CMD ["bash"]

# setup github labels
LABEL org.opencontainers.image.source=https://github.com/ros-controls/ros2_control_ci
LABEL org.opencontainers.image.description="Debian 12 for ros-controls"
LABEL org.opencontainers.image.licenses=Apache-2.0
