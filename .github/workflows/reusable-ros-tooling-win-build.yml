name: Reusable Windows Binary Build
# author: Christoph Froehlich <christoph.froehlich@ait.ac.at>

on:
  workflow_call:
    inputs:
      ros_distro:
        description: "ROS 2 distribution name, e.g. rolling"
        required: true
        type: string
      ref_for_scheduled_build:
        description: "Reference on which the repo should be checkout for scheduled build. Usually is this name of a branch or a tag."
        default: ""
        required: false
        type: string
      os_name:
        description: "On which OS to run the build job"
        required: false
        default: "windows-2022"
        type: string
      container:
        description: "(optional) Docker container to run the job in, e.g. ubuntu:noble"
        required: false
        default: ""
        type: string
      pixi_dependencies:
        description: "Whitespace separated list of additional pixi dependencies"
        required: false
        default: ""
        type: string
      windows_dependencies:
        description: "Path to a repos file with additional windows dependencies"
        required: false
        default: ""
        type: string
      skip_packages:
        description: "Packages to skip from build and test"
        default: ""
        required: false
        type: string

jobs:
  reusable_ros_tooling_source_build:
    name: ${{ inputs.ros_distro }} ${{ inputs.os_name }}
    runs-on: ${{ inputs.os_name }}
    container: ${{ inputs.container }}
    env:
      # this will be src/{repo-owner}/{repo-name}
      repo_path: src/${{ github.repository }}
      pixi_path: C:\dev
    steps:
      - name: Checkout default ref when build is not scheduled
        if: ${{ github.event_name != 'schedule' }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.repo_path }}
      - name: Checkout ${{ inputs.ref_for_scheduled_build }} on scheduled build
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_for_scheduled_build }}
          path: ${{ env.repo_path }}

      - name: Bootstrap pixi
        # https://docs.ros.org/en/rolling/Installation/Windows-Install-Binary.html
        run: |
          mkdir -p ${{ env.pixi_path }}
          Set-Location -Path ${{ env.pixi_path }}
          irm https://raw.githubusercontent.com/ros2/ros2/refs/heads/rolling/pixi.toml -OutFile pixi.toml

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          manifest-path: ${{ env.pixi_path }}\pixi.toml

      - name: Install additional pixi dependencies
        working-directory: ${{ env.pixi_path }}
        run: |
          pixi add ${{ inputs.pixi_dependencies }}

      - name: Install ROS
        working-directory: ${{ env.pixi_path }}
        # https://docs.ros.org/en/rolling/Installation/Windows-Install-Binary.html
        run: |
          # Download and extract ROS 2 package
          $url = "https://ci.ros2.org/view/packaging/job/packaging_windows/lastSuccessfulBuild/artifact/ws/ros2-package-windows-AMD64.zip"
          $output = "ros2-package-windows-AMD64.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath ros2_${{ inputs.ros_distro }}

      # - name: Get package list
      #   id: package_list_action
      #   uses: ros-controls/ros2_control_ci/.github/actions/set-package-list-pixi@windows/pixi
      #   with:
      #     path: ${{ env.repo_path }}
      #     manifest-path: ${{ env.pixi_path }}

      - name: Install dependencies
        run: |
          if (Test-Path ${{ env.repo_path }}\realtime_tools.${{ inputs.ros_distro }}.repos) {
            Write-Output "Local repos file found"
            $repo_file = "${{ env.repo_path }}\realtime_tools.${{ inputs.ros_distro }}.repos"
          } else {
            Write-Output "No local repos file found"
            $repo_file=""
          }
          if (![string]::IsNullOrWhiteSpace("${{ inputs.windows_dependencies }}") -and (Test-Path "${{ env.repo_path }}\${{ inputs.windows_dependencies }}")) {
            Write-Output "Windows repos file found"
            $repo_file_win = "${{ env.repo_path }}\${{ inputs.windows_dependencies }}"
          } else {
            Write-Output "No windows dependencies provided or file not found"
            $repo_file_win = ""
          }
          pixi shell --manifest-path ${{ env.pixi_path }}
          if (![string]::IsNullOrWhiteSpace($repo_file)) {
            vcs import --input ${{ env.repo_path }}/$repo_file src
          }
          if (![string]::IsNullOrWhiteSpace($repo_file_win)) {
            vcs import --input ${{ env.repo_path }}/$repo_file_win src
          }

      - name: Debug Build workspace 1
        shell: cmd
        run: |
          pixi shell --manifest-path ${{ env.pixi_path }}
          ls ${{ env.pixi_path }}\ros2_${{ inputs.ros_distro }}\ros2-windows

      - name: Debug Build workspace 1.5
        shell: cmd
        run: |
          pixi shell --manifest-path ${{ env.pixi_path }}
          colcon --version
          call ${{ env.pixi_path }}\ros2_${{ inputs.ros_distro }}\ros2-windows\setup.bat
          echo sourced ros2_${{ inputs.ros_distro }}\ros2-windows\setup.bat
          echo colcon --version
          colcon --version

      - name: Build workspace
        # TODO: use Ninja generator for RSL, but doesn't work for msg packages
        # https://github.com/search?q=repo%3APickNikRobotics%2FRSL%20ninja&type=code
        # https://github.com/colcon/colcon-ros/issues/84#issuecomment-1862881299
        shell: cmd
        run: |
          pixi shell --manifest-path ${{ env.pixi_path }}
          call ${{ env.pixi_path }}\ros2_${{ inputs.ros_distro }}\ros2-windows\setup.bat
          echo sourced ros2_${{ inputs.ros_distro }}\ros2-windows\setup.bat
          set up_to_arg=
          if not "realtime_tools"=="" (
          set up_to_arg=--packages-up-to realtime_tools
          )
          set skip_arg=
          if not "${{ inputs.skip_packages }}"=="" (
          set skip_arg=--packages-skip ${{ inputs.skip_packages }}
          )
          echo colcon build %up_to_arg% %skip_arg%
          colcon build %up_to_arg% %skip_arg% --cmake-args --event-handler console_cohesion+
